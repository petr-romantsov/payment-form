{"mappings":"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","sources":["main.js","createForm.js"],"sourcesContent":["import { el, setChildren } from 'redom';\nimport { createPaymentForm } from './createForm';\nimport \"./main.css\";\nimport { cvv } from 'card-validator/dist/cvv';\n\n\n//создаем страницу с формой\nfunction createPage() { \n\n    return el('div.container', [\n        el('h1.title', \"Форма оплаты\"), \n        createPaymentForm().form\n        ]);\n}\n\n//доавляем форму на страницу\nsetChildren(document.body, createPage());\n\n//переменные для работы с формой \nconst form = document.getElementById('form'),\n      cardInput = document.getElementById('card'),\n      dateInput = document.getElementById('date'),\n      cvvInput = document.getElementById('cvv'),\n      emailInput = document.getElementById('email'),\n      button = document.getElementById('button'),\n      //массив инпутов, чтобы не повторять код проверок а использовать forEach\n      fields = [cardInput, dateInput, cvvInput, emailInput],\n      //валидаторы\n      validator = require('card-validator'),\n      emailValidator = require('email-validator'),\n      //переменные классов\n      ERROR_CLASS = 'error',\n      SUCCESS_CLASS = 'success',\n      DISABLED_BTN = 'form__btn--disabled';\n\nfunction validateForm () { \n    //на старте проверки делаем кнопку активной\n    button.disabled = false;\n    button.classList.remove(DISABLED_BTN);\n\n    //создаем массив из пар инпут-валидатор, чтобы дальше сделать проверку циклом\n    const validators = [\n        [cardInput, validator.number],\n        [dateInput, validator.expirationDate],\n        [cvvInput, validator.cvv],\n        [emailInput, (value) => ({ isValid: emailValidator.validate(value) })],\n    ];\n    //цикл проверки каждого инпута\n    validators.forEach(([input, validate]) => {\n        //если поле пустое \n        if (!input.value) { \n            //блокируем кнопку\n            button.disabled = true;\n            button.classList.add(DISABLED_BTN);\n            //прекращаем проверку\n            return;\n        }\n        //если значение некорректное\n        if (!validate(input.value).isValid) { \n            //блокируем кнопку\n            button.disabled = true;\n            button.classList.add(DISABLED_BTN)\n            //стилизуем ошибку поля\n            input.classList.add(ERROR_CLASS);\n        } else { \n            //иначе стилизуем успешное заполнение инпута\n            input.classList.add(SUCCESS_CLASS);\n        }\n    }); \n}\n//функция сброса стилей ошибки/успешного заполнения\nfunction resetValidityStyles(event) { \n    (event.target).classList.remove(ERROR_CLASS, SUCCESS_CLASS);\n}\n\nfields.forEach((input) => {\n    //проверка формы по событию блюр\n    input.addEventListener('blur', validateForm);\n    //сброс стилей при вводе в любое поле\n    input.addEventListener('input', resetValidityStyles);\n});\n\n","import { el, mount, setChildren } from \"redom\";\nimport Cleave from \"cleave.js\";\nimport './main.css';\n\n//функция получения минимально возможной даты для маски \nfunction getMinDate () { \n    const currentDate = new Date();\n    let minMonth = String(currentDate.getMonth() + 2);\n    const minYear = String(currentDate.getFullYear()).split('').splice(2, 2).join('');\n\n    if (minMonth < 10) { \n        minMonth = `${0}${minMonth}`;\n    }\n\n    const minDate = `${minYear}-${minMonth}`;\n\n    return minDate;\n}\n\nexport const createPaymentForm = () => {\n    //создаем элементы\n    const form = el('form.form#form', { novalidate: \"novalidate\" }),\n    wrapperTop = el('div.form__wrapper-top'),\n    cardLabel = el('label.form__label.form__label--card', \"Номер карты\", { for: \"card\" }),\n    cardInput = el('input.form__input#card', { type: \"text\", required: \" \", name: \"card\", placeholder: 'xxxx xxxx xxxx xxxx' }),\n    wrapperBtm = el('div.form__wrapper-btm'),\n    dateLabel = el('label.form__label.form__label--date', \"Срок действия\", { for: \"date\" }),\n    dateInput = el('input.form__input#date', { type: \"text\", required: \" \", name: \"date\", placeholder: 'мм/гг'}),\n    cvvLabel = el('label.form__label.form__label--cvc', \"CVC/CVV\", { for: \"cvv\" }),\n    cvvInput = el('input.form__input#cvv', { maxLength: \"3\", onKeyPress: \"return event.charCode >= 48 && event.charCode <= 57\", required: \" \", name: \"cvv\", placeholder: '000' }),\n    emailLabel = el('label.form__label.form__label--email', \"Email\", { for: \"email\" }),\n    emailInput = el('input.form__input#email', { type: \"email\", required: \" \", name: \"email\", placeholder: 'example@example.ru' }),\n    button = el('button.form__btn.form__btn--disabled#button', \"Оплатить\", { type: 'submit' });\n\n    //маска для номера карты\n    const cardInputMask = new Cleave(cardInput, {\n    creditCard: true,\n    creditCardStrictMode: true\n    });\n\n    //маска для срока действия\n    const dateInputMask = new Cleave(dateInput, {\n    date: true, \n    dateMin: getMinDate(),\n    dateMax: '99-12',\n    datePattern: ['m', 'y']\n    });\n\n    //монтируем элементы\n    mount(cardLabel, cardInput);\n    mount(dateLabel, dateInput);\n    mount(cvvLabel, cvvInput);\n    mount(emailLabel, emailInput);\n    mount(wrapperTop, cardLabel);\n    setChildren(wrapperBtm, [dateLabel, cvvLabel]);\n    setChildren(form, [wrapperTop, wrapperBtm, emailLabel, button]);\n\n    return { \n        form, \n        cardInput,\n        dateInput,\n        cvvInput,\n        emailInput,\n    }\n}\n"],"names":[],"version":3,"file":"index.js.map"}